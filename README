h1. EJB-dispatcher
Read online documentation[http://wiki.github.com/lamikae/ejb-dispatcher]


h2. Installation

First, install EJB-dispatcher from the gem to JRuby 1.1.6.
<pre>
 $ export JRUBY_HOME="/usr/local/jruby"
 $ sudo -E ${JRUBY_HOME}/bin/jruby ${JRUBY_HOME}/bin/gem install ejb-dispatcher-1.0.0.gem
</pre>

Note that eventually the gem will be placed to Rubyforge. For now you must build the gem yourself by executing "rake gem" in the EJB-dispatcher git clone.


h2. Startup

To use EJB-dispatcher one must create a hub where to place all custom Ruby code and Java bytecode.

Creating a new hub is done by calling the init task with a name for the hub:
<pre>
  $ ejb-dispatcher.rb init[name]
</pre>

After creation, you can find a clean configuration file config/dispatcher.yml and empty folders to house the code. You should introduce this directory into version control.

Follow the instructions on the README inside the newly created hub.


h2. Daemon environment

If you like EJB-dispatcher and want to run it as a daemon, you should create a new dedicated user account "ejb-dispatcher".

<pre>
  $ sudo /usr/sbin/useradd -c 'EJB dispatcher for Ruby' -d /opt/ejb-dispatcher -m -g nobody -s /bin/bash ejb-dispatcher
  $ sudo passwd ejb-dispatcher
</pre>

Insert the environment settings to the user's profile (/opt/ejb-dispatcher/.profile)

<pre>
  export JRUBY_HOME="/usr/local/jruby"
  export PATH="${JRUBY_HOME}/bin:${HOME}/ejb-dispatcher/bin:${PATH}"
</pre>


h3. Init scripts
An init script for Red Hat Linux is provided, and the same script also works on CentOS and possibly also on Fedora.

NOT IN GIT MASTER YET!

The scripts rely that the corresponding user and the environment have been set up.



h2. Notes on tests
EJB-dispatcher has a test suite that tests the dispatcher itself, not any EJB methods.
You will need to write the tests for any 3rd party EJBs you may want to use.
Examples will be provided.

Currently the test suite *does not run* without proprietary Oracle RMI JARs placed to +vendor/lib/java+.


h2. Notes on RMI/ORMI:

Only ORMI is tested. RMI should act just as fine, but it needs subtle changes in the code.
Contact the author for support.

If you however would like to use ORMI, just drop the required JARs to vendor/lib/java.

